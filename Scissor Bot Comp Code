#pragma config(Motor,  port1,           bottomLeftWheel, tmotorVex393_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           leftLiftTwo,   tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           rightLiftTwo,  tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           leftLiftOne,   tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           rightLiftOne,  tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           conveyerMotor, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           topLeftWheel,  tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           topRightWheel, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           conveyerMotorTwo, tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          bottomRightWheel, tmotorVex393_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!


const int
	LEFT		= 0,
	RIGHT		= 1,
	UP			= 3,
	DOWN		= 4,
	BACKWARD	= 5,
	FORWARD		= 6; //constant direction numbers

const int
	BUTTON_PRESSED	= 1,
	BUTTON_RELEASED = 0; //constant values for button pressed and released

const int MOTOR_SPEED_MAX = 127;
const int MOTOR_SPEED_STOPPED = 0;

const int CONVEYER_SPEED = MOTOR_SPEED_MAX; //speed at which the conveyer operates
const int LIFT_SPEED = 100; //speed at which the scissor lift operates
const int STRAFE_SPEED = MOTOR_SPEED_MAX; //speed at which the robot strafes
const int STRAFE_SPEED_FINE = 70; //strafe speed for fine movement


//Autonomous values
const int
	RUN_AWAY_SPEED = MOTOR_SPEED_MAX,
	THROW_BLOCK_SPEED = CONVEYER_SPEED; //speed for auton functions
const float
	RUN_AWAY_DURATION = 1,
	THROW_BLOCK_DURATION = 2.6, //seconds duration for auton functions
	RETRACT_CONVEYOR_DURATION = 0.5; //seconds duration for auton conveyor reverse

bool isPressed(int button) //returns whether or not a button is pressed
{
	return vexRT[button] == BUTTON_PRESSED;
}

int getAxis(int axis) //gets the value of a controller axis (joysticks)
{
	return vexRT[axis];
}

void strafe(int speed, int direction) //strafes left or right
{
	switch(direction)
	{
	case LEFT: //strafe to the right
		motor[bottomLeftWheel] = -speed;
		motor[topLeftWheel] = speed;
		motor[bottomRightWheel] = speed;
		motor[topRightWheel] = -speed;
		break;
	case RIGHT: //strafe to the left
		motor[bottomLeftWheel] = speed;
		motor[topLeftWheel] = -speed;
		motor[bottomRightWheel] = -speed;
		motor[topRightWheel] = speed;
		break;
	}
}

void moveScissors(int speed, int direction) //moves the scissors up or down
{
	switch(direction)
	{
	case UP:
		motor[leftLiftOne] = speed;
		motor[leftLiftTwo] = speed;
		motor[rightLiftOne] = speed;
		motor[rightLiftTwo] = speed;
		break;
	case DOWN:
		motor[leftLiftOne] = -speed;
		motor[leftLiftTwo] = -speed;
		motor[rightLiftOne] = -speed;
		motor[rightLiftTwo] = -speed;
		break;
	}
}

void stopScissors() //sets the scissors motors to stopped
{
	motor[rightLiftOne] = MOTOR_SPEED_STOPPED;
	motor[rightLiftTwo] = MOTOR_SPEED_STOPPED;
	motor[leftLiftOne] = MOTOR_SPEED_STOPPED;
	motor[leftLiftTwo] = MOTOR_SPEED_STOPPED;
}

void moveConveyer(int speed, int direction)
{
	switch(direction)
	{
	case FORWARD:
		motor[conveyerMotor] = speed;
		motor[conveyerMotorTwo] = speed;
		break;
	case BACKWARD:
		motor[conveyerMotor] = -speed;
		motor[conveyerMotorTwo] = -speed;
		break;
	}
}

void stopConveyer()
{
	motor[conveyerMotor] = MOTOR_SPEED_STOPPED;
	motor[conveyerMotorTwo] = MOTOR_SPEED_STOPPED;
}

void moveRobotLinear(int leftSpeed, int rightSpeed) //moves the wheels on the robot tank style (no strafe)
{
	motor[topRightWheel] = rightSpeed;
	motor[bottomRightWheel] = rightSpeed;
	motor[topLeftWheel] = leftSpeed;
	motor[bottomLeftWheel] = leftSpeed;
}

void stopRobotMovement() //stops all motors for movement
{
	motor[bottomLeftWheel] = MOTOR_SPEED_STOPPED;
	motor[topLeftWheel] = MOTOR_SPEED_STOPPED;
	motor[bottomRightWheel] = MOTOR_SPEED_STOPPED;
	motor[topRightWheel] = MOTOR_SPEED_STOPPED;
}

void handleJoystickInput() //handles input from the thumb joysticks
{
	moveRobotLinear(-getAxis(Ch3), -getAxis(Ch2));
}

void handleMovement() //handles strafing and joystick movement
{
	if(isPressed(Btn5U) && !isPressed(Btn6U)) //strafe left
	{
		strafe(STRAFE_SPEED, LEFT);
	}
	else if(isPressed(Btn6U) && !isPressed(Btn5U)) //strafe right
	{
		strafe(STRAFE_SPEED, RIGHT);
	}
	else if(isPressed(Btn5D) && !isPressed(Btn6D)) //strafe left fine
	{
		strafe(STRAFE_SPEED_FINE, LEFT);
	}
	else if(isPressed(Btn6D) && !isPressed(Btn5D)) //strafe right fine
	{
		strafe(STRAFE_SPEED_FINE, LEFT);
	}
	else //handle joystick input
	{
		handleJoystickInput();
	}
}

void handleConveyer() //handles movement of the conveyer
{
	if(isPressed(Btn8U) && !isPressed(Btn8D))  //conveyer control
	{
		moveConveyer(CONVEYER_SPEED, FORWARD);
	}
	else if(isPressed(Btn8D) && !isPressed(Btn8U))
	{
		moveConveyer(CONVEYER_SPEED, BACKWARD);
	}
	else
	{
		stopConveyer();
	}
}

void handleScissors() //handles movement of the scissors
{
	if(isPressed(Btn7U)) //raise scissors
	{
		moveScissors(LIFT_SPEED, UP);
	}
	else if(isPressed(Btn7D)) //lower all
	{
		moveScissors(LIFT_SPEED, DOWN);
	}
	else //stop scissors
	{
		stopScissors();
	}
}

void runAway(int speed, float duration) //autonomous function for moving robot forward
{
	moveRobotLinear(-speed, -speed);

	wait(duration);

	stopRobotMovement();
}

void throwBlock(int speed, float duration) //autonomous function for moving the conveyer
{
	moveConveyer(speed, FORWARD);

	wait(duration);

	stopConveyer();
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions  h
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
	// Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
	runAway(RUN_AWAY_SPEED, RUN_AWAY_DURATION);
	throwBlock(THROW_BLOCK_SPEED, THROW_BLOCK_DURATION);
	throwBlock(-THROW_BLOCK_SPEED, RETRACT_CONVEYOR_DURATION);
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()
{
	// User control code here, inside the loop
	while (true)
	{
		handleConveyer();

		handleScissors();

		handleMovement();
	}
}
