#pragma config(Sensor, dgtl1,  leftSensor,     sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  rightSensor,    sensorQuadEncoder)
#pragma config(Sensor, dgtl5,  led,            sensorLEDtoVCC)
#pragma config(Motor,  port1,           lift,          tmotorVex393_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           leftWheel,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           rightWheel,    tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           intake,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           frontIntake,   tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           leftShoot,     tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port7,           rightShoot,    tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port8,           leftShootTwo,  tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port9,           rightShootTwo, tmotorVex393HighSpeed_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

int oldButtonSevenUp = 0; //saves button state
int oldButtonSevenDown = 0;

int LEFT_SHOOT_SPEED = 40;  //left wheel shoot speed for use with full battery
int RIGHT_SHOOT_SPEED = 57; //right wheel shoot speed for use with full battery
const int AUTON_SHOOT_SPEED = 63; //shoot speed for autonomous mode

//sets speeds for switching with RPS switching
int LEFT_FULLFIELD_SPEED = 54;
int RIGHT_FULLFIELD_SPEED = 68;
int LEFT_MIDFIELD_SPEED = 37;
int RIGHT_MIDFIELD_SPEED = 54;

const float DEFAULT_RPS = 0.027; //default shoot speed for reset
const float MIDRANGE_RPS = 0.022; //shoot speed for mid field

/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
	// Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
	// .....................................................................................
	// Insert user code here.
	// .....................................................................................
	motor[leftShoot] = AUTON_SHOOT_SPEED;
	motor[rightShoot] = AUTON_SHOOT_SPEED;
	motor[leftShootTwo] = -AUTON_SHOOT_SPEED;
	motor[rightShootTwo] = -AUTON_SHOOT_SPEED;
	wait10Msec(300); //gives shooting wheels time to get up to speed
	motor[lift] = 70;
	motor[intake] = 100;

}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()
{

//reset shaft encoder values
SensorValue[leftSensor] = 0;
SensorValue[rightSensor] = 0;

SensorValue[led] = 0;

//set time to be reset with if statement
long secondPgmTime = nPgmTime;
float idealRPS = DEFAULT_RPS;
	while (true)
	{
		// This is the main execution loop for the user control program. Each time through the loop
		// your program should update motor + servo values based on feedback from the joysticks.

		// .....................................................................................
		// Insert user code here. This is where you use the joystick values to update your motors, etc.
		// .....................................................................................

		long updatingPgmTime = nPgmTime;

		if (updatingPgmTime - secondPgmTime >= 1000) {
			float revolutionsLeft = -SensorValue[leftSensor] / 360;
			float leftRPS = revolutionsLeft / (updatingPgmTime - secondPgmTime); //caclulate left revs per second

			float revolutionsRight = -SensorValue[rightSensor] / 360;
			float rightRPS = revolutionsRight / (updatingPgmTime - secondPgmTime); //caclulate right revs per second

			//If RPS is within range, light up LED to indicate RPS is good enough to shoot
			if (leftRPS < (idealRPS + .002) & leftRPS > (idealRPS - .002)
				& rightRPS < (idealRPS + .002) & rightRPS > (idealRPS - .002)) {
				SensorValue[led] = 1;
			} else {
				SensorValue[led] = 0;
			}

			if (vexRT[Btn6U] != 0) {
				if (leftRPS < idealRPS) { //adjusts speed of shooting motor based on RPS read by shaft encoders
					 LEFT_SHOOT_SPEED++;
				} else if (leftRPS > idealRPS) {
					 LEFT_SHOOT_SPEED--;
				}

				if (rightRPS < idealRPS) {
					 RIGHT_SHOOT_SPEED++;
				} else if (rightRPS > idealRPS) {
					 RIGHT_SHOOT_SPEED--;
				}
			}

			//for printing RPS values to debug stream
		  clearDebugStream();
			writeDebugStream("idealRPS = %f.\nrightRPS =  %f. leftRPS = %f.\nLEFT_SHOOT_SPEED = %i. RIGHT_SHOOT_SPEED = %i. \nrevolutionsLeft = %i.", idealRPS, rightRPS, leftRPS, LEFT_SHOOT_SPEED, RIGHT_SHOOT_SPEED, revolutionsLeft);

			secondPgmTime = nPgmTime;
			SensorValue[rightSensor] = 0;
			SensorValue[leftSensor] = 0;
		}

		motor[leftWheel] = vexRT[Ch3]; //tank controls
		motor[rightWheel] = vexRT[Ch2] ;

		if (vexRT[Btn5U] == 1) { //assign buttons and speed for lift conveyor
			motor[lift] = 127;
			motor[intake] = 100;
			motor[frontIntake] = 127;
		} else if (vexRT[Btn5D] == 1) {
			motor[lift] = -127;
			motor[intake] = -100;
			motor[frontIntake] = -127;
		} else {
			motor[lift] = 0;
			motor[intake] = 0;
			motor[frontIntake] = 0;
		}

		if (vexRT[Btn6U] == 1) { //assign button and speed for wheels that shoot ball into net using full battery speed
			motor[leftShoot] = LEFT_SHOOT_SPEED;
			motor[rightShoot] = RIGHT_SHOOT_SPEED;
			motor[leftShootTwo] = -LEFT_SHOOT_SPEED;
			motor[rightShootTwo] = -RIGHT_SHOOT_SPEED;
		} else if (vexRT[Btn7U] == 1 & oldButtonSevenUp == 0) { //increase RPS by set value for on the field adjustments
			idealRPS = idealRPS + .001;
		} else if (vexRT[Btn7D] == 1 & oldButtonSevenDown == 0) { //decrease RPS by set value
			idealRPS = idealRPS - .001;
		} else if (vexRT[Btn7R] == 1) { //set RPS back to starting value
			idealRPS = DEFAULT_RPS;
			LEFT_SHOOT_SPEED = LEFT_FULLFIELD_SPEED;
			RIGHT_SHOOT_SPEED = RIGHT_FULLFIELD_SPEED;
		}else if (vexRT[Btn7L] == 1) {
			idealRPS = MIDRANGE_RPS;
			LEFT_SHOOT_SPEED = LEFT_MIDFIELD_SPEED;
			RIGHT_SHOOT_SPEED = RIGHT_MIDFIELD_SPEED;
		} else {
			motor[leftShoot] = 0;
			motor[rightShoot] = 0;
			motor[leftShootTwo] = 0;
			motor[rightShootTwo] = 0;
		}

		oldButtonSevenUp = vexRT[Btn7U];
		oldButtonSevenDown = vexRT[Btn7D];
	}
}
