#pragma config(Sensor, dgtl1,  leftSensor,     sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  rightSensor,    sensorQuadEncoder)
#pragma config(Sensor, dgtl5,  led,            sensorLEDtoVCC)
#pragma config(Sensor, dgtl1,  leftSensor,     sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  rightSensor,    sensorQuadEncoder)
#pragma config(Sensor, dgtl5,  led,            sensorLEDtoVCC)
#pragma config(Motor,  port1,           conveyor,      tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           bottomLeftShoot, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           bottomRightShoot, tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           topRightShoot, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           topLeftShoot,  tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           backRightDrive, tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           backLeftDrive, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           frontLeftDrive, tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port9,           frontRightDrive, tmotorVex393_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

int oldButtonSevenUp = 0; //saves button state
int oldButtonSevenDown = 0;

int SHOOT_SPEED = 68;  //shoot speed to be changed
int DRAINED_SPEED = 72;  //shoot speed for use with drained batteries
int MIDFIELD_SPEED = 58;  //shoot speed for midfield shooting
const int DEFAULT_SPEED = 68; //default shoot speed for reset

/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
	// Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
	// .....................................................................................
	// Insert user code here.
	// .....................................................................................
	motor[topLeftShoot] = SHOOT_SPEED;
	motor[topRightShoot] = SHOOT_SPEED;
	motor[bottomLeftShoot] = SHOOT_SPEED;
	motor[bottomRightShoot] = SHOOT_SPEED;
	wait1Msec(4000); //gives shooting wheels time to get up to speed
	motor[conveyor] = 40;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()
{
	// User control code here, inside the loop

	while (true)
	{
		// This is the main execution loop for the user control program. Each time through the loop
		// your program should update motor + servo values based on feedback from the joysticks.

		// .....................................................................................
		// Insert user code here. This is where you use the joystick values to update your motors, etc.
		// .....................................................................................


		motor[frontLeftDrive] = vexRT[Ch3];
		motor[backLeftDrive] = vexRT[Ch3];
		motor[frontRightDrive] = vexRT[Ch2] ;
		motor[backRightDrive] = vexRT[Ch2] ;

		if (vexRT[Btn5U] == 1) { //assign button and speed for lift conveyor
			motor[conveyor] = 100;
		} else if (vexRT[Btn5D] == 1) { //assign button and speed for lift conveyor
			motor[conveyor] = -100;
		} else {
			motor[conveyor] = 0;
		}

		if (vexRT[Btn6U] == 1) { //assign button and speed for wheels that shoot ball into net using full battery speed
			motor[topLeftShoot] = SHOOT_SPEED;
			motor[topRightShoot] = SHOOT_SPEED;
			motor[bottomLeftShoot] = SHOOT_SPEED;
			motor[bottomRightShoot] = SHOOT_SPEED;
	  } else if (vexRT[Btn6D] == 1) { //shoot using drained battery speed
			motor[topLeftShoot] = DRAINED_SPEED;
			motor[topRightShoot] = DRAINED_SPEED;
			motor[bottomLeftShoot] = DRAINED_SPEED;
			motor[bottomRightShoot] = DRAINED_SPEED;
		} else if (vexRT[Btn7U] == 1 & oldButtonSevenUp == 0) { //increase shoot speed by one
			SHOOT_SPEED++;
			DRAINED_SPEED++;
			//MIDFIELD_SPEED++;
		} else if (vexRT[Btn7D] == 1 & oldButtonSevenDown == 0) { //decrease shoot speed by one
			SHOOT_SPEED--;
			DRAINED_SPEED--;
			//MIDFIELD_SPEED--;
		} else if (vexRT[Btn8D] == 1) { //set shoot speed back to starting value
			SHOOT_SPEED = DEFAULT_SPEED;
		} else if (vexRT[Btn8U] == 1) { //set shoot speed back to starting value
			SHOOT_SPEED = MIDFIELD_SPEED; //set shoot speed to midfield speed
		} else {
			motor[topLeftShoot] = 0;
			motor[topRightShoot] = 0;
			motor[bottomLeftShoot] = 0;
			motor[bottomRightShoot] = 0;
		}

		clearDebugStream();
		writeDebugStream("SHOOT_SPEED = %f.", SHOOT_SPEED);

		oldButtonSevenUp = vexRT[Btn7U];
		oldButtonSevenDown = vexRT[Btn7D];
	}
}
